#!/usr/bin/python

import sys
from numpy import *
import os
from usbtmc import usbtmc
from gooch_housego import FreqSynth

amplitudes = xrange(0, 1024)

if __name__ == '__main__':
        import time
        import argparse

        parser = argparse.ArgumentParser()
        parser.add_argument('-c', '--channel', required=True, type=int, help='channel to scan')
        parser.add_argument('-p', '--power', type=float, help='set desired power (microwatts)')
        parser.add_argument('-o', '--output', metavar='FILE', help='output plot to FILE')
        parser.add_argument('-l', '--log', action='store_true', help='plot power on logarithmic scale')
        parser.add_argument('-O', '--raw-output', metavar='FILE', help='output raw data to FILE')
        parser.add_argument('-S', '--samples', type=int, metavar='N', help='number of samples to take for each frequency', default=5)
        args = parser.parse_args()

        orig_states = {}
        synth = FreqSynth.probe()
        for ch in range(8):
                synth.select_channel(ch)
                orig_states[ch] = synth.get_status().mode
                synth.set_mode('off')

        synth.select_channel(args.channel)
        synth.set_mode('on')
        
        test = usbtmc('/dev/usbtmc0')
        test.write('CONF:POW')

        # Do scan
        data = []
        for amp in amplitudes:
                sys.stderr.write('%4d / %4d\r' % (amp, 1023))
                sys.stderr.flush()
                synth.set_amplitude(amp)
                time.sleep(1e-3)
                for i in range(args.samples):
                        test.write('READ?')
                        power = float(test.read())
                        data.append((amp, power))

        data = array(data)

        if args.power is not None:
                idx = (abs(data[:,1] - args.power)).argmin()
                amp = data[idx,0]
                synth.set_amplitude(amp)

        if args.output is not None:
                from matplotlib import pyplot as pl
                pl.plot(data[:,0], data[:,1], '+')
                pl.xlabel('AOTF amplitude')
                pl.ylabel('Power (uW)')
                if args.log: pl.yscale('log')
                pl.savefig(args.output)

        if args.raw_output is not None:
                savetxt(args.raw_output, data)

        for ch in range(8):
                synth.select_channel(ch)
                synth.set_mode(orig_states[ch])

